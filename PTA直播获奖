/*
7-4 直播获奖
某编程竞赛即将举行。为了增加观赏性，组委会决定逐一评出每个选手的成绩，并直播即时的获奖分数线。本次竞赛的获奖率为 w%，即当前排名前 w% 的选手的最低成绩就是即时的分数线。
更具体地，若当前已评出了 p 个选手的成绩，则当前计划获奖人数为 max(1,⌊p∗w%⌋)，其中 w 是获奖百分比，⌊x⌋ 表示对 x 向下取整，max(x,y) 表示 x 和 y 中较大的数。如有选手成绩相同，则所有成绩并列的选手都能获奖，因此实际获奖人数可能比计划中多。
作为评测组的技术人员，请你帮组委会写一个直播程序。
输入格式:
第一行有两个整数 n, w。分别代表选手总数与获奖率。 第二行有 n 个整数，依次代表逐一评出的选手成绩。
输出格式:
只有一行，包含 n 个非负整数，依次代表选手成绩逐一评出后，即时的获奖分数线。相邻两个整数间用一个空格分隔。最后一个整数后无空格。
输入样例1:
在这里给出一组输入。例如：
10 60
200 300 400 500 600 600 0 300 200 100
输出样例1:
在这里给出相应的输出。例如：
200 300 400 400 400 500 400 400 300 300
输入样例2:
在这里给出一组输入。例如：
10 30
100 100 600 100 100 100 100 100 100 100
输出样例2:
在这里给出相应的输出。例如：
100 100 600 600 600 600 100 100 100 100
数据规模与约定
各测试点的 n 如下：
	  测试点编号         n=
		1∼3             10
		4∼6             500
		7∼10            2000
		11∼17           10000
		18∼20           100000
对于所有测试点，每个选手的成绩均为不超过 600 的非负整数，获奖百分比 w 是一个正整数且 1≤w≤99。
*/
#include<iostream>
using namespace std;
int main()
{
	int n, w;
	cin >> n;
	cin >> w;
	int score[607];
	int i, j, count = 0;
	for (i = 1; i <= 606; i++)
		score[i] = 0;
	for (i = 1; i <= n; ++i)
	{
		int t, sum = 0;
		cin >> t;
		score[t]++;
		int v = max(1, (int)(1.0 * i * w / 100));
		for (j = 600; j >= 0; j--)
		{
			sum += score[j];
			if (sum >= v)
			{
				if (count == 0)
					cout << j;
				if (count > 0)
					cout << " " << j;
				count++;
				break;
			}
		}
	}
	return 0;
}
